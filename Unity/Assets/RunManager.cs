using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using NeuralNetwork;
using System.IO;


///<summary>
/// Class that is responsible for run managment
///</summary>
public class RunManager : MonoBehaviour
{
    //List of all results generated by any agent manager
    List<Run> runs = new List<Run>();
    int run_num = 0;
    [SerializeField]
    GameObject agentPrefab;

    ModelManager modelManager = null;
    // Start is called before the first frame update
    void Start()
    {
        Run.agentPrefab = agentPrefab;
        //For now the behaviour is to indefinetely repeat randomized runs;
        StartNewRun();
    }

    // Update is called once per frame
    void Update()
    {

    }

    void StartNewRun()
    {
	    //modelManager = new ModelManager("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/20-02-17_19-21-34",20,0.2f);

        Run r = null;


        r = new Run(20);
        modelManager = new ModelManager(r.agents.Select(x => x.GetComponent<Agent>().network).ToList(), 0.2f);
        string dateTime = "20-02-19_15-31-25";
        modelManager.Models[0].LoadFromString(File.ReadAllText("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/"+dateTime+"/No0.w"));
        modelManager.Models[1].LoadFromString(File.ReadAllText("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/"+dateTime+"/No1.w"));
        modelManager.Models[2].LoadFromString(File.ReadAllText("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/"+dateTime+"/No2.w"));
        modelManager.Models[3].LoadFromString(File.ReadAllText("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/"+dateTime+"/No3.w"));
        modelManager.Models[4].LoadFromString(File.ReadAllText("/home/bartek/Documents/AI-PG/Unity/Assets/Weights/"+dateTime+"/No4.w"));


        if (modelManager == null)
        {
            r = new Run(20);
            modelManager = new ModelManager(r.agents.Select(x => x.GetComponent<Agent>().network).ToList(), 0.2f);
            
        }
        else
        {
            modelManager.Expand(); //expand models list to original size
            r = new Run(modelManager.Models);
        }
        r.runName = "Run #" + run_num;
        r.RunComplete += OnRunEnded;
        r.BeginRun();
    }

    void OnRunEnded(object sender, List<Run.AgentResult> results)
    {
        //Accept only Run senders 
        if (!(sender is Run r))
            throw new ArgumentException("Sender is not of the type Run");


        //Unsubscribe from sender to avoid memory leak
        r.RunComplete -= OnRunEnded;

        //store run
        runs.Add(r);
        modelManager.SaveTop(5,r);
        //List<NetworkModel> models = r.results.OrderBy(x => x.score).Select(x => x.model).ToList();
        StartNewRun();
    }
}
